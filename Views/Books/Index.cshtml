@model List<BookStore.Models.Book>
@{
    ViewData["Title"] = "Nossos Livros";
}

<div class="container py-5">
    <!-- Header da p�gina -->
    <div class="text-center mb-5">
        <h1 class="fade-in-up">A nossa Coleção de Livros</h1>
        <p class="text-secondary fade-in-up">Descubra histórias incríveis!</p>
    </div>

    <!-- Filtros -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="d-flex gap-2 flex-wrap">
                <button class="btn btn-outline active" data-filter="all">Todos</button>
                <button class="btn btn-outline" data-filter="Ficção">Ficção</button>
                <button class="btn btn-outline" data-filter="Tecnologia">Tecnologia</button>
                <button class="btn btn-outline" data-filter="História">História</button>
                <button class="btn btn-outline" data-filter="Literatura Clássica">Literatura</button>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex gap-2 justify-content-md-end">
                <select class="form-select" id="sortSelect" style="width: auto;">
                    <option value="title">Ordenar por Título</option>
                    <option value="price-low">Menor Pre�o</option>
                    <option value="price-high">Maior Pre�o</option>
                    <option value="rating">Melhor Avaliação</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Grid de livros -->
    <div class="books-grid" id="booksGrid">
        @foreach (var book in Model)
        {
            <div class="card book-card fade-in-up" data-category="@book.Category">
                <div class="position-relative">
                    <img src="@book.ImageUrl" class="card-img-top" alt="@book.Title">
                    @if (book.Stock < 5)
                    {
                        <span class="badge badge-warning position-absolute" style="top: 10px; right: 10px;">
                            �ltimas unidades
                        </span>
                    }
                    @if (book.Rating >= 4.5)
                    {
                        <span class="badge badge-success position-absolute" style="top: 10px; left: 10px;">
                            <i class="fas fa-star"></i> Bestseller
                        </span>
                    }
                </div>

                <div class="card-body">
                    <div class="mb-2">
                        <span class="badge badge-primary">@book.Category</span>
                    </div>

                    <h5 class="card-title">@book.Title</h5>
                    <p class="text-secondary mb-2">por @book.Author</p>

                    <div class="rating mb-3">
                        <div class="stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(book.Rating))
                                {
                                    <i class="fas fa-star"></i>
                                }
                                else if (i <= book.Rating)
                                {
                                    <i class="fas fa-star-half-alt"></i>
                                }
                                else
                                {
                                    <i class="far fa-star"></i>
                                }
                            }
                        </div>
                        <span class="rating-text">(@book.ReviewCount) avaliações</span>
                    </div>

                    <p class="card-text">@book.Description</p>

                    <div class="d-flex justify-content-between align-items-center">
                        <div class="price">R$ @book.Price.ToString("F2")</div>
                        <div class="text-secondary">
                            <i class="fas fa-box"></i> @book.Stock em stock
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="d-flex gap-2">
                        <a href="@Url.Action("Details", new { id = book.Id })" class="btn btn-outline flex-fill">
                            <i class="fas fa-eye"></i> Ver Detalhes
                        </a>
                        <button class="btn btn-primary flex-fill add-to-cart" data-book-id="@book.Id">
                            <i class="fas fa-shopping-cart"></i> Adicionar
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-book fa-3x text-secondary mb-3"></i>
            <h3>Nenhum livro encontrado</h3>
            <p class="text-secondary">Tente ajustar os filtros ou volte mais tarde para ver novos títulos.</p>
        </div>
    }
</div>

<!-- Modal de Carrinho -->
<div class="modal fade" id="cartModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Livro Adicionado ao Carrinho!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center">
                    <i class="fas fa-check-circle fa-2x text-success me-3"></i>
                    <div>
                        <p class="mb-1">O livro foi adicionado ao seu carrinho com sucesso!</p>
                        <small class="text-secondary">Continue comprando ou finalize o seu pedido.</small>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Continuar a Comprar</button>
                <button type="button" class="btn btn-primary">Ver Carrinho</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Filtros de categoria
            const filterButtons = document.querySelectorAll('[data-filter]');
            const bookCards = document.querySelectorAll('.book-card');

            filterButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // Atualizar bot�o ativo
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');

                    const filter = this.dataset.filter;

                    bookCards.forEach(card => {
                        if (filter === 'all' || card.dataset.category === filter) {
                            card.style.display = 'block';
                            card.style.animation = 'fadeInUp 0.5s ease';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });

            // Ordena��o
            const sortSelect = document.getElementById('sortSelect');
            sortSelect.addEventListener('change', function () {
                const sortBy = this.value;
                const grid = document.getElementById('booksGrid');
                const cards = Array.from(grid.children);

                cards.sort((a, b) => {
                    switch (sortBy) {
                        case 'title':
                            return a.querySelector('.card-title').textContent.localeCompare(
                                b.querySelector('.card-title').textContent
                            );
                        case 'price-low':
                            return parseFloat(a.querySelector('.price').textContent.replace('R$ ', '').replace(',', '.')) -
                                parseFloat(b.querySelector('.price').textContent.replace('R$ ', '').replace(',', '.'));
                        case 'price-high':
                            return parseFloat(b.querySelector('.price').textContent.replace('R$ ', '').replace(',', '.')) -
                                parseFloat(a.querySelector('.price').textContent.replace('R$ ', '').replace(',', '.'));
                        case 'rating':
                            return b.querySelectorAll('.fas.fa-star').length - a.querySelectorAll('.fas.fa-star').length;
                        default:
                            return 0;
                    }
                });

                cards.forEach(card => grid.appendChild(card));
            });

            // Adicionar ao carrinho
            const addToCartButtons = document.querySelectorAll('.add-to-cart');
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const bookId = this.dataset.bookId;

                    // Simular adi��o ao carrinho
                    this.innerHTML = '<i class="fas fa-check"></i> Adicionado!';
                    this.classList.remove('btn-primary');
                    this.classList.add('btn-success');
                    this.disabled = true;

                    // Mostrar modal
                    const modal = new bootstrap.Modal(document.getElementById('cartModal'));
                    modal.show();

                    // Restaurar bot�o ap�s 3 segundos
                    setTimeout(() => {
                        this.innerHTML = '<i class="fas fa-shopping-cart"></i> Adicionar';
                        this.classList.remove('btn-success');
                        this.classList.add('btn-primary');
                        this.disabled = false;
                    }, 3000);
                });
            });

            // Anima��o de entrada
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, observerOptions);

            document.querySelectorAll('.fade-in-up').forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(30px)';
                el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                observer.observe(el);
            });
        });
    </script>
}

